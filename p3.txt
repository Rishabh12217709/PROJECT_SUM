PROJECT - 3

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

// Message Class
class Message {
public:
    string sender;
    string receiver;
    string content;
    string timestamp; // Timestamp added

    Message() {}

    Message(string sender, string receiver, string content) {
        this->sender = sender;
        this->receiver = receiver;
        this->content = content;
        // Example timestamp; in real applications, use actual time
        this->timestamp = "2024-07-18 12:00:00";
    }

    void displayMessage() {
        cout << "From: " << sender << " To: " << receiver << "\nContent: " << content << "\nTimestamp: " << timestamp << endl;
    }
};

// SocialGroup Class
class SocialGroup {
public:
    string groupName;
    vector<pair<string, string>> messages;
    vector<string> members;

    SocialGroup() {}

    SocialGroup(string groupName) {
        this->groupName = groupName;
    }

    void addMember(string userName) {
        members.push_back(userName);
    }

    void addMessage(string userName, string content) {
        messages.push_back({userName, content});
    }

    void displayMessages() {
        cout << "Messages in " << groupName << " group:\n";
        for (auto &msg : messages) {
            cout << "From: " << msg.first << "\nContent: " << msg.second << endl;
        }
    }
};

// User Class
class User {
public:
    string firstName;
    string lastName;
    int age;
    string gender;

    User() {}

    User(string firstName, string lastName, int age, string gender) {
        this->firstName = firstName;
        this->lastName = lastName;
        this->age = age;
        this->gender = gender;
    }
};

// Global structures
map<string, User> mapUserName;
map<string, set<string>> Friends;

void addUser(string userName, User user) {
    if (mapUserName.find(userName) == mapUserName.end()) {
        mapUserName[userName] = user;
    } else {
        cout << "UserName Already Taken\n";
    }
}

void makeThemFriend(string userName1, string userName2) {
    Friends[userName1].insert(userName2);
    Friends[userName2].insert(userName1);
}

void displayAllUsers() {
    for (auto &i : mapUserName) {
        cout << "UserName: " << i.first << " Name: " << i.second.firstName << " " << i.second.lastName << "\n";
    }
}

void displayAllFriendships() {
    for (auto &i : Friends) {
        cout << i.first << " has friends: ";
        for (auto &j : i.second) {
            cout << j << " ";
        }
        cout << "\n";
    }
}

int main() {
    User alice("Alice", "Mishra", 30, "Female");
    User bob("Bob", "Ali", 27, "Male");

    addUser("Alice", alice);
    addUser("Bob", bob);
    makeThemFriend("Alice", "Bob");

    // Chat Box Functionality
    Message message("Alice", "Bob", "Hey, Please Wake up early Tomorrow");
    message.displayMessage();

    // Social Groups Functionality
    SocialGroup group1("Goa Trip");
    group1.addMember("Alice");
    group1.addMessage("Alice", "Can't wait for the trip!");

    // Display all users and friendships
    displayAllUsers();
    displayAllFriendships();
    group1.displayMessages();

    return 0;
}
